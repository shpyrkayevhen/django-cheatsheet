# from store.models import Product
# from django.core.exceptions import ObjectDoesNotExist
# from django.db.models import Q, F, Func, Value
# from django.db.models.aggregates import Count, Max, Min, Avg, Sum (for work with aggregate obj)


# ---------------------------------------------------------------------------------------------------------------------------------------


# --- (1) RETRIEVING OBJECTS/–û–¢–†–ò–ú–ê–ù–ù–Ø –û–ë'–Ñ–ö–¢–Ü–í --- $


# Get all products from table Products -> queryset
"""products = Product.objects.all()"""

# Get only single object with id = 1
"""product = Product.objects.get(id=1).first()"""

# Get quantity products table Product immediately -> int
"""products_quantity = Product.objects.count()"""

# Check exist product with id=1 in table -> True or False
"""product_exist = Product.objects.filter(pk=1).exists()"""


# ---------------------------------------------------------------------------------------------------------------------------------


# --- (2) FILTERING OBJECTS/–§–Ü–õ–¨–¢–†–£–í–ê–ù–ù–Ø –û–ë‚Äô–Ñ–ö–¢–Ü–í --- $


# Get all products which costs $20
'''products = Product.objects.filter(price=20)'''

# Get all products which greater than > $20
'''products = Product.objects.filter(price__gt=20'''

# Get all products which less than or equal <= $20
'''products = Product.objects.filter(price__elt=20)'''

# Get all products which price between $20 - $50
'''products = Product.objects.filter(price__range=(20,50))'''

# Get all products in collection 2 (relational table Collection ForeignKey)
'''products = Product.objects.filter(collection__id=2)'''

# Get all products in collection where collection id < 4
'''products = Product.objects.filter(collection__id__lt=4)'''

# Get all products with title 'coffee' (key sensitive)
'''products = Product.objects.filter(title__contains="coffee")'''

# Get all products with title 'coffee' (not key sensitive)
'''products = Product.objects.filter(title__icontains="coffee")'''

# Get all products which title start in 'Ab'
'''products = Product.objects.filter(title__startswith="Ab")'''

# Get all products which title end in '.com'
'''products = Product.objects.filter(title__endwith=".com")'''

# Get all products which was updated in 2021 year
'''products = Product.objects.filter(update_at__year=2021)'''

# Get all products without description
'''products = Product.objects.filter(description__isnull=True)'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- COMPLEX LOOKUPS USING Q OBJECT --- $ üëâ from django.db.models import Q


# –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OR –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Ç–æ –∫–æ—Ä–∏—Å—Ç—É—î–º–æ—Å—å Q object.
# –Ø–∫—â–æ AND —Ç–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ —Ç–∞–∫–æ–∂, –∞–ª–µ –ª–µ–≥—à–µ —Ç–∞–∫ üëá

# (1) Get all products which price > $20 AND title is 'Iphone'
'''products = Product.objects.filter(price__gt=20,title='Iphone')'''

# (2) Get all products which price > $20 AND title is 'Iphone'
'''Product.objects.filter(price__gt=20).filter(title='Iphone')'''


# Get products which have: inventory < 10 OR price > 20
'''products = Product.objects.filter(Q(inventory__lt=10) | Q(price__gt=20))'''

# Get products which have: inventory < 10 AND price > 20 ('~' - not)
'''products = Product.objects.filter(Q(inventory__lt=1 0) & ~Q(price__lt=20))'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- REFERENCING FIELDS USING F OBJECTS --- $ üëâ from django.db.models import F


# Get products which: inventory = price (column)
'''products = Product.objects.filter(inventory = F('unit_price'))'''

# –¢–∞–∫–æ–∂ –º–æ–∂–µ–º–æ –ø–æ—Å–∏–ª–∞—Ç–∏—Å—å –Ω–∞ –ø–æ–ª—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
# Get products which fields: product_id = collection_id
'''products = Product.objects.filter(id = F('collection__id'))'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- SORTING DATA --- $


# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ –∞–ª—Ñ. –ø–æ—Ä—è–¥–∫—É –ø–æ –Ω–∞–∑–≤—ñ
'''products = Product.objects.order_by('title')'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö(–≤—ñ–¥ –∫—ñ–Ω—Ü—è)
'''products = Product.objects.order_by('-id')'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤—ñ–¥ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–µ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö
'''products = Product.objects.order_by('-last_update')'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Å–ø–µ—Ä—à—É –ø–æ —Ü—ñ–Ω—ñ –≤—ñ–¥ –Ω–∞–π–¥–æ—Ä–æ–∂—á–∏—Ö —Ç–∞ —ó—Ö –Ω–∞–∑–≤—ñ –≤ –∞–ª—Ñ. –ø–æ—Ä—è–¥–∫—É.
'''products = Product.objects.order_by('-price', 'title')'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç–∏ –ø–æ—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤—ñ–¥ –Ω–∞–π–¥–µ—à–µ–≤—à–∏—Ö –¥–æ –Ω–∞–π–¥–æ—Ä–æ–∂—á–∏—Ö (—Ç–æ–º—É —â–æ –≤ –∫—ñ–Ω—Ü—ñ –≤–∫–∞–∑–∞–Ω–æ .reverse –Ω–∞—à–æ–≥–æ query)
'''products = Product.objects.order_by('-price','title').reverse()'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –æ–±‚Äô—î–∫—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó 1 (–ø–æ–≤'—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ Product) —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —ó—Ö –ø–æ —Ü—ñ–Ω—ñ (–≤—ñ–¥ –Ω–∞–π–¥–µ—à–µ–≤—à–∏—Ö –¥–æ –Ω–∞–π–¥–æ—Ä–æ–∂—á–∏—Ö)
'''products=Product.objects.filter('collection__id=1').order_by('price')'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–¥–æ—Ä–æ–∂—á–∏–π –ø—Ä–æ–¥—É–∫—Ç –∑ —Ç–∞–±–ª–∏—Ü—ñ (1)
'''product = Product.objects.order_by('-price')[0]'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –∑ —Ç–∞–±–ª–∏—Ü—ñ (2)
'''product = Product.objects.earliest('price')'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–¥–æ—Ä–æ–∂—á–∏–π –ø—Ä–æ–¥—É–∫—Ç –∑ —Ç–∞–±–ª–∏—Ü—ñ (2)
'''product = Product.objects.latest('price')'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- LIMITING RESULTS --- $


# –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–µ—Ä—à–∏—Ö 5 –æ–±‚Äô—î–∫—Ç—ñ–≤ –Ω–∞ 1 —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
'''product = Product.objects.all()[0:5]'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 5 –æ–±‚Äô—î–∫—Ç—ñ–≤ –Ω–∞ 2 —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
'''product = Product.objects.all()[5:10]'''

# –û—Ç—Ä–∏–º–∞—Ç–∏ 10 –Ω–∞–π–¥–æ—Ä–æ–∂—á–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ
'''products = Product.objects.order_by(‚Äò-price‚Äô)[0:10]'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- SELECTING FIELDS TO QUERY --- $

# –û—Ç—Ä–∏–º–∞—î–º–æ –ª–∏—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ id —Ç–∞ title —É—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
'''products = Product.objects.values('id', 'title')'''

# –û—Ç—Ä–∏–º–∞—î–º–æ –Ω–∞–∑–≤—É —É—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –Ω–∞–∑–≤—É –∫–æ–ª–µ–∫—Ü—ñ—ó –¥–æ —è–∫–æ—ó –≤–æ–Ω–∏ –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è (–ø–æ–≤‚Äô—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è collection –∑ product) -> INNER JOIN
'''products = Product.objects.values('title', 'collection__title')'''
# Return after for loop -> ('Iphone', 'Mobile'), ('Macbook', 'Computer')


# Select products that have been ordered and sort them by title üëâ from store.models import ORderItem
'''products = OrderItem.objects.values('product__id')'''

# –ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —â–æ–± —ó—Ö –Ω–µ –±—É–ª–æ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É queryset values –¥–æ–±–∞–≤–ª—è—î–º–æ –º–µ—Ç–æ–¥ distinct
'''products = OrderItem.objects.values('product__id').distinct()'''

# –©–æ–± —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ü—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –π–¥–µ–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é product —ñ —Å–æ—Ä—Ç—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ id
'''products = Product.objects.filter(id__in=OrderItem.objects.values('product__id').distinct())'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- DEFERRING FIELDS/–í–Ü–î–ö–õ–ê–î–ï–ù–ù–Ø –ü–û–õ–Ü–í --- $


# Return instance of Product class. .values() - return data as  a dictionary obj. Be careful with this method!
'''products = Product.objects.only('id', 'title')'''

# –û—Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ –æ–∫—Ä—ñ–º –∫–æ–ª–æ–Ω–∫–∏ –∑ —ó—Ö –æ–ø–∏—Å–æ–º
'''products = Product.objects.defer('description')'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- SELECTING RELATED OBJECTS --- $

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, –∫–æ–ª–∏ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü—è –º–∞—î Foreign Key(Many-to-One) –∑ –ø–æ–≤‚Äô—è–∑–∞–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é. select_related()
# It's the same: from product Inner Join collection ON ..)
'''products = Product.objects.select_related('collection').all()'''
'''products = Product.objects.select_related('collection__column_name').all()'''

# –ú–æ–∂–µ–º–æ –∑—Ä—É—á–Ω–æ –≤–∏—Ç—è–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ–≤‚Äô—è–∑–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å –±–µ–∑ –ª–∏—à–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –±–¥
# {% for product in products %}
#	 {{ product.collection.title }}
# {% endfor %}

# # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, –∫–æ–ª–∏ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü—è –º–∞—î  Foreign Key(Many-to-Many) –∑ —ñ–Ω—à–æ—ó —Ç–∞–±–ª–∏—Ü–µ—é
'''products = Product.objects.prefetch_related('promotion').all()'''

# –ú–æ–∂–µ–º–æ –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏, –∫–æ–ª–∏ –≤ –Ω–∞—Å —î –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ–≤‚Äô—è–∑–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
'''products = Product.objects.prefetch_related('promotion').select_related('collection').all()'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- AGGREGATING OBJECTS --- $

# –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ max/min/avg product price –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .aggregate() –º–µ—Ç–æ–¥, –≤ —è–∫–∏–π –ø–µ—Ä–µ–¥–∞—î–º–æ aggreg obj
# from django.db.models.aggregates import Count, Max, Min, Avg, Sum

# Count all sum
'''products_price = Product.objects.aggregate(Count('price'))'''

# Count product quantity
'''product = Product.objects.aggregate(Count('id'))'''
'''product = Product.objects.aggregate(count=Count('id'))'''

# Count product quantity and min product price
'''product = Product.objects.aggregate(count=Count('id'), min_pricet=Count('price'))'''

# –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±‚Äô—î–∫—Ç—ñ–≤ –≤ –ø–µ–≤–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ–π
'''product = Product.objects.filter('collection__id=1').aggregate(count=Count('id'))'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- ANNOTATING OBJECT --- $

# –ö–æ–ª–∏ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ –±–¥ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω—ñ –¥–∞–Ω–∏—Ö, –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ (–∫–ª–∞—Å—É) –Ω–æ–≤—É –∫–æ–ª–æ–Ω–∫—É.
# –ê—Ä–≥—É–º–µ–Ω—Ç –≤ –º–µ—Ç–æ–¥ .annotate() –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ (NewColumnName = Expression)

# Expression: Value, F, Func, Aggregate(Max, Min‚Ä¶). –¶–µ –∫–ª–∞—Å–∏ —è–∫—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∂–¥–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤—É–≤–∞–≤–∞—Ç–∏

# –û—Ç—Ä–∏–º–∞—î–º–æ queryset –∑ —Ç–∞–±–ª–∏—Ü—ñ Product, –≤ —è–∫–æ–º—É –∫–æ–∂–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –º–∞—Ç–∏–º–µ –¥–æ–¥–∞—Ç–∫–æ–≤—É –∫–æ–ª–æ–Ω–∫—É(–∞—Ç—Ä–∏–±—É—Ç) is_new –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º 1
'''product = Product.objects.annotate(is_new=Value(1))'''

# # –û—Ç—Ä–∏–º–∞—î–º–æ queryset –∑ —Ç–∞–±–ª–∏—Ü—ñ Product, –≤ —è–∫–æ–º—É –∫–æ–∂–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –º–∞—Ç–∏–º–µ –¥–æ–¥–∞—Ç–∫–æ–≤—É –∫–æ–ª–æ–Ω–∫—É(–∞—Ç—Ä–∏–±—É—Ç) new_id
# –∑ –∑–Ω–∞—á–µ–Ω–Ω—è–º –π–æ–≥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ id –∞–±–æ 2-–∏–π –ø—Ä–∏–∫–ª–∞–¥
'''product = Product.objects.annotate(new_id=F('id'))'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- CALLING DATABASE FUNCTIONS --- $

'''product=Product.objects.annotate(full_name=Func(F('first_name'),Value(' '),F('last_name'), function='CONCAT')'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- GROUPING DATA --- $


# –•–æ—á–µ–º–æ –ø–æ–±–∞—á–∏—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –º–∞—î customer. –¢–∞–∫ —è–∫ –≤ —Ç–∞–±–ª–∏—Ü—ñ Order —î Foreign Key –Ω–∞ Customer,
# —Ç–æ –≤ Customer Django –∞—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î related_name = 'order' (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤‚Äô—è–∑–æ–∫). –ú–∏ –º–æ–∂–µ–º–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏
# —Ü—é –Ω–∞–∑–≤—É –≤–∫–∞–∑–∞–≤–∞—à–∏ –≤ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ customer —Ç–∞–±–ª–∏—Ü—ñ Order, –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (related_name=‚Äù ‚Äù)

'''product=Product.objects.annotate(orders_count=Count('order')'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- WORKING WITH EXPRESSION WRAPPERS --- $ üëâ from django.db.models import ExpressionWrapper

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, –∫–æ–ª–∏ –±—É–¥—É—î–º–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –≤–∏—Ä–∞–∑
'''discounted_price = ExpressionWrapper(F('unit_price') * 0.8, uotput_field=DecimalField())'''

'''product=Product.objects.annotate(discounted_price=discounted_price)'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- QUERYING GENERIC RELATIONSHIPS --- $


# Generic (Content Type) –º–æ–¥–µ–ª—ñ(—Ç–∞–±–ª–∏—Ü—ñ) –∑ –¥–∞–Ω–∏–º –∑–≤‚Äô—è–∑–∫–æ–º –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–æ –±—É–¥—å —è–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –Ω–∞—à–∏—Ö app.
# –ü–µ—Ä–µ–ª—ñ–∫ –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞—à–∏—Ö app –∑ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ (id, app_label, name) –º–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –±–¥ Table django_content_type.

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –º–æ–¥–µ–ª–µ–π(—Ç–∞–±–ª–∏—Ü—å) –∑ django_content_type
# from django.contrib.contenttypes.models import ContentType
# from tags.models import TaggedItem
# from store.models import Product

# –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ django_content_type (–í–±—É–¥–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å CoontentType –≤ Django) –∫–æ–Ω—Ç–µ–Ω—Ç id –¥–ª—è –º–æ–¥–µ–ª—ñ Product.
'''content_type=ContentType.objects.get_for_model(Product)'''

# –ó–Ω–∞–π—à–æ—à–∏ fields –Ω–∞—à–æ—ó –º–æ–¥–µ–ª—ñ Product (id: 11, name: product)
'''queryset=TaggedItem.objects.select_related('tag').filter(content_type=content_type, object_id=pk)'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- CREATING OBJECTS --- $


# 1 –≤–∞—Ä—ñ–∞–Ω—Ç
'''
    collection = Collection()
    collection.title = 'Video Games'
    –¢—É—Ç Foreign Key –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –≤ –º–æ–¥–µ–ª—ñ
    collection.featured_product = Product(pk=1)
    collection.save()
'''

# 2 –≤–∞—Ä—ñ–∞–Ω—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î instance —ñ save())
'''collection = Collection.objects.create(title = 'Video Games', featured_product_id=pk)'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- UPDATING OBJECTS --- $


# 1 –≤–∞—Ä—ñ–∞–Ω—Ç

'''
    collection = Collection.objects.get(id=pk)
    collection.title = 'Video Games'
    collection.featured_product = Product(pk=1) <- Foreign Key –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –≤ –º–æ–¥–µ–ª—ñ
    collection.save())
'''

# 2 –≤–∞—Ä—ñ–∞–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ –∫—ñ–Ω—Ü—ñ —Ä–æ–±–∏—Ç—å .save()
'''collection = Collection.objects.filter(id=pk).update(title = 'VG', featured_product_id=pk)'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- DELETING OBJECTS --- $


'''collection = Collection.objects.get(id=pk)
   collection.delete()'''


# –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤
'''collections = Collection.objects.filter(id__gt=5).delete()'''


# ------------------------------------------------------------------------------------------------------------------------------------


# --- TRANSACTIONS --- $ üëâ from django.db import transactions

# # –ö–æ–ª–∏ –º–∏ –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —Ä–æ–±–∏–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –¥—ñ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ (—Ç–∞–±–ª–∏—Ü—è–º–∏),
# —ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ/–∑–º—ñ–Ω—ñ –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —î –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å) —Ä–æ–±–æ—Ç–∏ —ñ–Ω—à–æ–≥–æ (–∑ –Ω–∏–º –æ–¥—Ä–∞–∑—É).
# –©–æ–± –∑–º—ñ–Ω–∏ –≤—ñ–¥–±—É–ª–∏—Å—å –æ–¥—Ä–∞–∑—É –≤ –¥–≤–æ—Ö –º–æ–¥–µ–ª—è—Ö (—è–∫—ñ –∑–≤‚Äô—è–∑–∞–Ω—ñ)

# def say_hello(request):

#    with transaction.atomic():
#        order = Order()
#        order.customer_id = 1
#        order.save()

#        item = OrderItem()
#        item.order = order
#        item.product_id = 1
#        item.quantity = 10
#        item.unit_price = 100
#        item.save


# ------------------------------------------------------------------------------------------------------------------------------------


# --- EXECUTING RAW SQL QUERIES --- $

'''products = Product.objects.raw('SELECT * FROM store_product')'''
'''products = Product.objects.raw('SELECT id, title FROM store_product')'''

# –ú–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ–º–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ –Ω–∞—à–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å
# from django.db import connection

#    with connection.cursor() as cursor:
#         cursor.execute('All SQL commands: CRUD')
